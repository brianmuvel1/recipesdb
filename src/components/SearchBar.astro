---
interface Props {
  categories: string[];
}

const { categories } = Astro.props;
---

<div class="max-w-xl mx-auto mb-8 space-y-4">
  <div class="relative">
    <div
      id="searchContainer"
      class="w-full min-h-[42px] px-4 py-2 rounded-lg border border-gray-300 focus-within:ring-2 focus-within:ring-blue-500 flex flex-wrap gap-2 items-center cursor-text"
    >
      <div id="chips" class="flex flex-wrap gap-2"></div>
      <input
        type="text"
        id="search"
        placeholder="Search recipes (separate terms with commas)..."
        class="flex-1 outline-none min-w-[200px]"
      />
    </div>
  </div>
  
  <div class="flex flex-wrap gap-2">
    {categories.map(category => (
      <button
        class="category-filter px-3 py-1 bg-gray-200 hover:bg-blue-100 text-gray-700 hover:text-blue-800 rounded-full text-sm transition-colors"
        data-category={category}
      >
        {category}
      </button>
    ))}
  </div>
</div>

<script>
  const searchContainer = document.getElementById('searchContainer');
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const chipsContainer = document.getElementById('chips');
  const categoryButtons = document.querySelectorAll('.category-filter');
  let activeCategories = new Set();
  let searchTerms = new Set<string>();

  function createChip(term: string) {
    const chip = document.createElement('div');
    chip.className = 'flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm';
    chip.innerHTML = `
      <span>${term}</span>
      <button type="button" class="remove-chip hover:text-blue-600" aria-label="Remove ${term}">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    `;
    
    chip.querySelector('.remove-chip')?.addEventListener('click', () => {
      searchTerms.delete(term);
      chip.remove();
      updateVisibility();
    });
    
    return chip;
  }

  function addSearchTerm(term: string) {
    term = term.trim().toLowerCase();
    if (term && !searchTerms.has(term)) {
      searchTerms.add(term);
      chipsContainer?.appendChild(createChip(term));
      updateVisibility();
    }
  }

  function handleInput(e: KeyboardEvent) {
    const input = e.target as HTMLInputElement;
    if (e.key === ',') {
      e.preventDefault();
      const terms = input.value.split(',');
      terms.forEach(term => addSearchTerm(term));
      input.value = '';
    } else if (e.key === 'Enter' && input.value) {
      addSearchTerm(input.value);
      input.value = '';
    } else if (e.key === 'Backspace' && input.value === '' && chipsContainer?.lastChild) {
      const lastChip = chipsContainer.lastChild as HTMLElement;
      const term = lastChip.querySelector('span')?.textContent?.toLowerCase() || '';
      searchTerms.delete(term);
      lastChip.remove();
      updateVisibility();
    }
  }

  function getRecipeSearchableText(recipe: Element): string[] {
    const title = recipe.querySelector('h2')?.textContent?.toLowerCase() || '';
    const ingredients = Array.from(recipe.querySelectorAll('.ingredients li'))
      .map(li => li.textContent?.toLowerCase() || '');
    const categories = Array.from(recipe.querySelectorAll('.category-chip'))
      .map(chip => chip.textContent?.toLowerCase().trim() || '');
    
    return [title, ...ingredients, ...categories];
  }

  function updateVisibility() {
    const recipes = document.querySelectorAll('article');
    
    recipes.forEach(recipe => {
      const searchableTexts = getRecipeSearchableText(recipe);
      const categoryChips = recipe.querySelectorAll('.category-chip');
      const recipeCategories = new Set(Array.from(categoryChips).map(chip => chip.textContent?.trim()));
      
      const matchesSearch = searchTerms.size === 0 || 
        Array.from(searchTerms).some(term => 
          searchableTexts.some(text => text.includes(term))
        );
      
      const matchesCategory = activeCategories.size === 0 || 
        Array.from(activeCategories).some(category => recipeCategories.has(category));
      
      recipe.classList.toggle('hidden', !(matchesSearch && matchesCategory));
    });
  }

  searchContainer?.addEventListener('click', () => {
    searchInput?.focus();
  });

  searchInput?.addEventListener('keydown', handleInput);

  categoryButtons.forEach(button => {
    button.addEventListener('click', () => {
      const category = button.getAttribute('data-category') || '';
      
      if (activeCategories.has(category)) {
        activeCategories.delete(category);
        button.classList.remove('bg-blue-100', 'text-blue-800');
        button.classList.add('bg-gray-200', 'text-gray-700');
      } else {
        activeCategories.add(category);
        button.classList.add('bg-blue-100', 'text-blue-800');
        button.classList.remove('bg-gray-200', 'text-gray-700');
      }
      
      updateVisibility();
    });
  });
</script>